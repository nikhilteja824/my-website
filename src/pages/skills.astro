---
import BaseLayout from "../layouts/BaseLayout.astro";
import { skillCategories, skillFilters, skills } from "../lib/skills.ts";

let selectedFilter = "All"; // Default filter
let selectedColor = skillFilters.find(f => f.name === selectedFilter)?.color || "#2563eb"; // Vibrant Blue for 'All'
---

<BaseLayout title="Skills" sideBarActiveItemID="skills">
  <div class="text-left">
    <h2 class="text-3xl font-bold mb-2">SKILLS</h2>
  </div>

  <div class="mb-8 text-justify text-gray-700 text-lg">
    Here is an overview of my skills across different domains.
  </div>

  <!-- Filters -->
  <div class="flex flex-wrap justify-center gap-4 mb-10" id="skill-filters">
    {skillFilters.map((filter) => (
      <button
        class="px-6 py-3 rounded-md text-base font-medium border border-gray-300 filter-btn transition-all duration-300 hover:shadow-lg hover:border-gray-500"
        data-filter={filter.name}
        data-color={filter.color}
      >
        {filter.name}
      </button>
    ))}
  </div>

  <!-- Skills Grid -->
  <div id="skills-container" class="grid grid-cols-1 md:grid-cols-2 gap-8">
    {skills.map((skill) => (
      <div 
        class="bg-white p-6 rounded-lg shadow-xl skill-item transition-all duration-500 hover:scale-[1.03] hover:shadow-2xl"
        data-category={skill.category} 
        data-filters={skill.filters.join(" ")}
      >
        <div class="flex items-center gap-4">
          <img src={`https://api.iconify.design/${skill.icon}.svg`} alt={skill.name} class="w-7 h-7" />
          <h3 class="text-xl font-bold text-gray-900">{skill.name}</h3>
        </div>
        <div class="relative w-full bg-gray-200 h-5 mt-4 rounded-full overflow-hidden shadow-sm">
          <div
            class="absolute top-0 left-0 h-full rounded-full skill-bar transition-all duration-700 ease-in-out"
            style={`width: ${(skill.level / 5) * 100}%; background: linear-gradient(to right, ${selectedColor}, #60a5fa);`}
          ></div>
        </div>
        <p class="text-md text-gray-600 mt-2 font-medium">{skill.level} / 5</p>
      </div>
    ))}
  </div>
</BaseLayout>

<script>
  function updateSkillBars(selectedColor) {
    document.querySelectorAll(".skill-bar").forEach(bar => {
      bar.style.background = `linear-gradient(to right, ${selectedColor}, #60a5fa)`;
    });
  }

  function setupSkillFilters() {
    const buttons = document.querySelectorAll("#skill-filters button");
    const skills = document.querySelectorAll(".skill-item");

    function highlightButton(button) {
      buttons.forEach(btn => {
        btn.classList.remove("border-blue-500", "text-blue-500", "font-semibold");
      });
      button.classList.add("border-blue-500", "text-blue-500", "font-semibold");
    }

    buttons.forEach((button) => {
      button.addEventListener("click", () => {
        highlightButton(button);
        const filter = button.getAttribute("data-filter");
        const color = button.getAttribute("data-color") || "#2563eb";
        
        skills.forEach((skill) => {
          if (filter === "All" || skill.getAttribute("data-filters").includes(filter)) {
            skill.style.display = "block";
          } else {
            skill.style.display = "none";
          }
        });
        
        updateSkillBars(color);
      });
    });
    const allButton = document.querySelector("#skill-filters button[data-filter='All']");
    if (allButton) highlightButton(allButton);
  }

  document.addEventListener("astro:after-swap", () => {
    setupSkillFilters();
  });

  setupSkillFilters();
</script>